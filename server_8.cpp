#include <queue>
#include <iostream>
#include <unistd.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <thread>
#include <sstream>
#include <map>
#include <atomic>
#include <string>
#include <iomanip>
#include <mutex>
#include <cstring>
#include <vector>

int break_flag = 1;
std::vector<int> monitor_socket_fds;
std::mutex monitor_socket_mutex;

// –ö–ª–∞—Å—Å —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Å–æ–∫–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞
class Logger {
public:
    static void log(const std::string& message) {
        std::cout << message << std::endl;
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–∫–µ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        std::string log_message = message + '\n';
        std::lock_guard<std::mutex> lock(monitor_socket_mutex);
        for (auto it = monitor_socket_fds.begin(); it != monitor_socket_fds.end(); ) {
            int fd = *it;
            if (send(fd, log_message.c_str(), log_message.length(), 0) < 0) {
                std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä (socket " << fd << "): " << strerror(errno) << std::endl;
                close(fd);
                it = monitor_socket_fds.erase(it);
            } else {
                ++it;
            }
        }
    }
};

struct Task {
    int from_id;
    int to_id;
    int result;
    Task(int f, int t, int r) : from_id(f), to_id(t), result(r) {
        Logger::log("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç ID:" + std::to_string(f) + " –∫ ID:" + std::to_string(t) 
                  + " —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" + (r == -1 ? "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" : std::to_string(r)));
    }
};

enum SendTaskType {
    REQUEST_CHECK,
    REVIEW_RESULT, 
    GET_QUEUE
};

void send_task(int socket_fd, SendTaskType task_type, int id_to, int id_from, int result) {
    std::string message = "";
    if (task_type == REQUEST_CHECK) {
        message = "check " + std::to_string(id_to) + " " + std::to_string(id_from);
    } else if (task_type == REVIEW_RESULT) {
        message = "reviewed " + std::to_string(id_to) + " " + std::to_string(id_from) + " " + std::to_string(result);
    } else if (task_type == GET_QUEUE) {
        message = "queue " + std::to_string(id_to) + " " + std::to_string(id_from);
    }
    message += "\n";
    
    std::string task_type_str;
    std::string emoji;
    switch (task_type) {
        case REQUEST_CHECK: 
            task_type_str = "–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏"; 
            emoji = "üîç";
            break;
        case REVIEW_RESULT: 
            task_type_str = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"; 
            emoji = (result == 1) ? "–ü–†–ò–ù–Ø–¢–û" : "–û–¢–ö–õ–û–ù–ï–ù–û";
            break;
        case GET_QUEUE: 
            task_type_str = "–æ—Ç–≤–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏"; 
            emoji = "üìã";
            break;
    }
    
    Logger::log("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (—Å–æ–∫–µ—Ç " + std::to_string(socket_fd) + "): \"" 
              + message.substr(0, message.size()-1) + "\" [" + task_type_str + "]");
    send(socket_fd, message.c_str(), message.size(), 0);
}


void sigint_handler(int sig) {
    break_flag = 0;
    Logger::log("SIGINT –ø–æ–ª—É—á–µ–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞...");
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr << "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " << argv[0] << " <–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞> <–ø–æ—Ä—Ç>" << std::endl;
        return 1;
    }

    std::string host_address = argv[1];
    int port = atoi(argv[2]);

    struct sigaction sa;
    sa.sa_handler = &sigint_handler;
    sa.sa_flags = 0;
    sigaction(SIGINT, &sa, NULL);
    signal(SIGPIPE, SIG_IGN);
    
    // –í –æ—á–µ—Ä–µ–¥—è—Ö –ª–µ–∂–∞—Ç id –∫–ª–∏–µ–Ω—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
    std::vector<std::queue<Task> > tasks(3, std::queue<Task>());
    
    int socket_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (socket_fd < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(host_address.c_str());
    server_addr.sin_port = htons(port);


    if (bind(socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    if (listen(socket_fd, 3) < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏" << std::endl;
        return 1;
    }

    Logger::log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç " + host_address + ":" + std::to_string(port));


    int connected_clients = 0;
    std::map<int, int> clients; 
    std::atomic<int> next_id = 0;
    
    while (connected_clients < 3) {
        Logger::log("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤... (" + std::to_string(connected_clients) + "/3)");
        int client_socket;
        struct sockaddr_in client_address;
        socklen_t client_len = sizeof(client_address);

        if ((client_socket = accept(socket_fd, (struct sockaddr *) &client_address, &client_len)) < 0) {
            Logger::log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
            return 1;
        }

        char buffer[1024];
        int n = recv(client_socket, buffer, sizeof(buffer), 0);
        std::string message(buffer, n);

        if (message == "client\n") {
            int new_client_id = next_id++;
            clients[new_client_id] = client_socket;
            connected_clients++;

            Logger::log("–ö–ª–∏–µ–Ω—Ç #" + std::to_string(connected_clients) + " –ø–æ–¥–∫–ª—é—á–µ–Ω —Å ID:" + std::to_string(new_client_id)
                  + " (—Å–æ–∫–µ—Ç: " + std::to_string(client_socket) + ", IP: " 
                  + inet_ntoa(client_address.sin_addr) + ":" + std::to_string(ntohs(client_address.sin_port)) + ")");
                  
        } else if (message == "monitor\n") {
            {
                std::lock_guard<std::mutex> lock(monitor_socket_mutex);
                monitor_socket_fds.push_back(client_socket);
            }
            Logger::log("–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω (—Å–æ–∫–µ—Ç: " + std::to_string(client_socket) + ")");
        }
    }

    Logger::log("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...");
    
    for (auto& pair : clients) {
        std::string message = "start " + std::to_string(pair.first) + "\n";
        Logger::log("–û—Ç–ø—Ä–∞–≤–∫–∞ ID:" + std::to_string(pair.first) + " –∫–ª–∏–µ–Ω—Ç—É (—Å–æ–∫–µ—Ç: " + std::to_string(pair.second) + ")");
        send(pair.second, message.c_str(), message.size(), 0);
    }

    Logger::log("–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
    std::thread monitor_thread([&]() {
        Logger::log("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞");
        
        while (break_flag) {
            int monitor_socket;
            struct sockaddr_in monitor_address;
            socklen_t monitor_len = sizeof(monitor_address);
            
            fd_set readfds;
            FD_ZERO(&readfds);
            FD_SET(socket_fd, &readfds);
            
            struct timeval tv;
            tv.tv_sec = 3;
            tv.tv_usec = 0;
            
            int select_result = select(socket_fd + 1, &readfds, NULL, NULL, &tv);
            
            if (select_result > 0 && FD_ISSET(socket_fd, &readfds)) {
                if ((monitor_socket = accept(socket_fd, (struct sockaddr *) &monitor_address, &monitor_len)) < 0) {
                    Logger::log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞");
                    std::this_thread::sleep_for(std::chrono::seconds(5));
                    continue;
                }
                
                char buffer[1024];
                int n = recv(monitor_socket, buffer, sizeof(buffer), 0);
                std::string message(buffer, n);
                
                if (message == "monitor\n") {
                    {
                        std::lock_guard<std::mutex> lock(monitor_socket_mutex);
                        monitor_socket_fds.push_back(monitor_socket);
                    }
                    Logger::log("–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω (—Å–æ–∫–µ—Ç: " + std::to_string(monitor_socket) 
                              + ", IP: " + inet_ntoa(monitor_address.sin_addr) 
                              + ":" + std::to_string(ntohs(monitor_address.sin_port)) + ")");
                } else {
                    close(monitor_socket);
                }
            }
            
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        
        Logger::log("–ü–æ—Ç–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });
    
    monitor_thread.detach();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç—Ä–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for (int i = 0; i < 3; i++) {
        std::thread([&, i]() {
            int socket_fd = clients[i];
            char buffer[1024];

            std::string recv_buffer;
            Logger::log("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(i) + " (—Å–æ–∫–µ—Ç: " + std::to_string(socket_fd) + ")");

            while (break_flag) {
                int n = recv(socket_fd, buffer, sizeof(buffer), 0);
                if (n <= 0) {
                    Logger::log("–ö–ª–∏–µ–Ω—Ç ID:" + std::to_string(i) + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    return;
                }

                
                recv_buffer.append(buffer, n);
                size_t pos = 0;
                std::string message;
                while ((pos = recv_buffer.find('\n')) != std::string::npos) {
                    message = recv_buffer.substr(0, pos);
                    Logger::log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(i) + ": \"" + message + "\"");
                    recv_buffer.erase(0, pos + 1);
                    if (message.empty()) {
                        Logger::log("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(i));
                        continue;
                    }
                    if (message.substr(0, 5) == "check") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int to, from;
                        iss >> cmd >> to >> from;
                        Logger::log("–ö–ª–∏–µ–Ω—Ç ID:" + std::to_string(from) + " –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —É –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(to));
                        tasks[to].push(Task{from, to, -1});
    
                        Logger::log("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(to));

                        send_task(clients[to], REQUEST_CHECK, to, from, 0);
                    } else if (message.substr(0, 8) == "reviewed") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int to, from, result;
                        iss >> cmd >> to >> from >> result;
                        std::string result_str = (result == 1) ? "–ü–†–ò–ù–Ø–¢–û" : "–û–¢–ö–õ–û–ù–ï–ù–û";
                        Logger::log("–ö–ª–∏–µ–Ω—Ç ID:" + std::to_string(from) + " –ø—Ä–æ–≤–µ—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(to) 
                                  + " —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: " + result_str);
    
                        send_task(clients[to], REVIEW_RESULT, to, from, result);
                    } else if (message.substr(0, 5) == "queue") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int id;
                        iss >> cmd >> id;
                        Logger::log("–ö–ª–∏–µ–Ω—Ç ID:" + std::to_string(id) + " –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏");
                        if (tasks[id].empty()) {
                            Logger::log("–û—á–µ—Ä–µ–¥—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(id) + " –ø—É—Å—Ç–∞");
                            send_task(clients[id], GET_QUEUE, -1, id, 0);
                        } else {
                            Logger::log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç—É ID:" + std::to_string(id) 
                                      + " (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(tasks[id].front().from_id) + ")");
                            send_task(clients[id], GET_QUEUE, tasks[id].front().from_id, id, 0);
                            tasks[id].pop();
                        }
                    } else {
                        Logger::log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(i) + ": \"" + message + "\"");
                    }
                }
            }

            Logger::log("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(i));
            close(socket_fd);
        }).detach();
    }

    Logger::log("–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");

    while (break_flag) {
        std::this_thread::sleep_for(std::chrono::seconds(3));
    }

    Logger::log("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");

    close(socket_fd);
    for (auto& pair : clients) {
        Logger::log("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ ID:" + std::to_string(pair.first) + " (—Å–æ–∫–µ—Ç: " + std::to_string(pair.second) + ")");
        close(pair.second);
    }

    Logger::log("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
    return 0;
}