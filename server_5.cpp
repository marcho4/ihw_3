#include <queue>
#include <iostream>
#include <unistd.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <thread>
#include <sstream>
#include <map>
#include <atomic>
#include <string>
#include <iomanip>

int break_flag = 1;

struct Task {
    int from_id;
    int to_id;
    int result;
    Task(int f, int t, int r) : from_id(f), to_id(t), result(r) {
        std::cout << "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç ID:" << f << " –∫ ID:" << t 
                  << " —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" << (r == -1 ? "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" : std::to_string(r)) << std::endl;
    }
};

enum SendTaskType {
    REQUEST_CHECK,
    REVIEW_RESULT, 
    GET_QUEUE
};

enum State {
    WRITING,
    WAITING,
    FIXING,
    REVIEWING,
};

void send_task(int socket_fd, SendTaskType task_type, int id_to, int id_from, int result) {
    std::string message = "";
    if (task_type == REQUEST_CHECK) {
        message = "check " + std::to_string(id_to) + " " + std::to_string(id_from);
    } else if (task_type == REVIEW_RESULT) {
        message = "reviewed " + std::to_string(id_to) + " " + std::to_string(id_from) + " " + std::to_string(result);
    } else if (task_type == GET_QUEUE) {
        message = "queue " + std::to_string(id_to) + " " + std::to_string(id_from);
    }
    message += "\n";
    
    std::string task_type_str;
    std::string emoji;
    switch (task_type) {
        case REQUEST_CHECK: 
            task_type_str = "–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏"; 
            emoji = "üîç";
            break;
        case REVIEW_RESULT: 
            task_type_str = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"; 
            emoji = (result == 1) ? "–ü–†–ò–ù–Ø–¢–û" : "–û–¢–ö–õ–û–ù–ï–ù–û";
            break;
        case GET_QUEUE: 
            task_type_str = "–æ—Ç–≤–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏"; 
            emoji = "üìã";
            break;
    }
    
    std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (—Å–æ–∫–µ—Ç " << socket_fd << "): \"" 
              << message.substr(0, message.size()-1) << "\" [" << task_type_str << "]" << std::endl;
    send(socket_fd, message.c_str(), message.size(), 0);
}


void sigint_handler(int sig) {
    break_flag = 0;
    std::cout << "SIGINT –ø–æ–ª—É—á–µ–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞..." << std::endl;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr << "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " << argv[0] << " <–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞> <–ø–æ—Ä—Ç>" << std::endl;
        return 1;
    }

    std::string host_address = argv[1];
    int port = atoi(argv[2]);

    struct sigaction sa;
    sa.sa_handler = &sigint_handler;
    sa.sa_flags = 0;
    sigaction(SIGINT, &sa, NULL);
    signal(SIGPIPE, SIG_IGN);
    
    // –í –æ—á–µ—Ä–µ–¥—è—Ö –ª–µ–∂–∞—Ç id –∫–ª–∏–µ–Ω—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
    std::vector<std::queue<Task> > tasks(3, std::queue<Task>());
    
    int socket_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (socket_fd < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(host_address.c_str());
    server_addr.sin_port = htons(port);


    if (bind(socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    if (listen(socket_fd, 3) < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏" << std::endl;
        return 1;
    }

    std::cout << "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç " << host_address << ":" << port << std::endl;

    int connected_clients = 0;
    std::map<int, int> clients; // id - socket
    std::atomic<int> next_id = 0;
    
    while (connected_clients < 3) {
        std::cout << "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤... (" << connected_clients << "/3)" << std::endl;
        int client_socket;
        struct sockaddr_in client_address;
        socklen_t client_len = sizeof(client_address);

        if ((client_socket = accept(socket_fd, (struct sockaddr *) &client_address, &client_len)) < 0) {
            std::cout << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞" << std::endl;
            return 1;
        }

        int new_client_id = next_id++;
        clients[new_client_id] = client_socket;

        std::cout << "–ö–ª–∏–µ–Ω—Ç #" << connected_clients << " –ø–æ–¥–∫–ª—é—á–µ–Ω —Å ID:" << new_client_id
                  << " (—Å–æ–∫–µ—Ç: " << client_socket << ", IP: " 
                  << inet_ntoa(client_address.sin_addr) << ":" << ntohs(client_address.sin_port) << ")" << std::endl;
        connected_clients++;
    }

    std::cout << "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..." << std::endl;
    
    for (auto& pair : clients) {
        std::string message = "start " + std::to_string(pair.first) + "\n";
        std::cout << "–û—Ç–ø—Ä–∞–≤–∫–∞ ID:" << pair.first << " –∫–ª–∏–µ–Ω—Ç—É (—Å–æ–∫–µ—Ç: " << pair.second << ")" << std::endl;
        send(pair.second, message.c_str(), message.size(), 0);
    }

    std::cout << "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" << std::endl;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç—Ä–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for (int i = 0; i < 3; i++) {
        std::thread([&, i]() {
            int socket_fd = clients[i];
            char buffer[1024];

            std::string recv_buffer;
            std::cout << "–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" << i << " (—Å–æ–∫–µ—Ç: " << socket_fd << ")" << std::endl;

            while (break_flag) {
                int n = recv(socket_fd, buffer, sizeof(buffer), 0);
                if (n <= 0) {
                    std::cout << "–ö–ª–∏–µ–Ω—Ç ID:" << i << " –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è" << std::endl;
                    return;
                }

                
                recv_buffer.append(buffer, n);
                size_t pos = 0;
                std::string message;
                while ((pos = recv_buffer.find('\n')) != std::string::npos) {
                    message = recv_buffer.substr(0, pos);
                    std::cout << "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" << i << ": \"" << message << "\"" << std::endl;
                    recv_buffer.erase(0, pos + 1);
                    if (message.empty()) {
                        std::cout << "–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" << i << std::endl;
                        continue;
                    }
                    if (message.substr(0, 5) == "check") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int to, from;
                        iss >> cmd >> to >> from;
                        std::cout << "–ö–ª–∏–µ–Ω—Ç ID:" << from << " –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —É –∫–ª–∏–µ–Ω—Ç–∞ ID:" << to << std::endl;
                        tasks[to].push(Task{from, to, -1});
    
                        std::cout << "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∫–ª–∏–µ–Ω—Ç–∞ ID:" << to << std::endl;

                        send_task(clients[to], REQUEST_CHECK, to, from, 0);
                    } else if (message.substr(0, 8) == "reviewed") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int to, from, result;
                        iss >> cmd >> to >> from >> result;
                        std::string result_str = (result == 1) ? "–ü–†–ò–ù–Ø–¢–û" : "–û–¢–ö–õ–û–ù–ï–ù–û";
                        std::cout << "–ö–ª–∏–µ–Ω—Ç ID:" << from << " –ø—Ä–æ–≤–µ—Ä–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ ID:" << to 
                                  << " —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: " << result_str << std::endl;
    
                        send_task(clients[to], REVIEW_RESULT, to, from, result);
                    } else if (message.substr(0, 5) == "queue") {
                        std::istringstream iss(message);
                        std::string cmd;
                        int id;
                        iss >> cmd >> id;
                        std::cout << "–ö–ª–∏–µ–Ω—Ç ID:" << id << " –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏" << std::endl;
                        if (tasks[id].empty()) {
                            std::cout << "–û—á–µ—Ä–µ–¥—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" << id << " –ø—É—Å—Ç–∞" << std::endl;
                            send_task(clients[id], GET_QUEUE, -1, id, 0);
                        } else {
                            std::cout << "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç—É ID:" << id 
                                      << " (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" << tasks[id].front().from_id << ")" << std::endl;
                            send_task(clients[id], GET_QUEUE, tasks[id].front().from_id, id, 0);
                            tasks[id].pop();
                        }
                    } else {
                        std::cout << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID:" << i << ": \"" << message << "\"" << std::endl;
                    }
                }
            }

            std::cout << "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID:" << i << std::endl;
            close(socket_fd);
        }).detach();
    }

    std::cout << "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..." << std::endl;

    while (break_flag) {
        std::this_thread::sleep_for(std::chrono::seconds(3));
    }

    std::cout << "–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É..." << std::endl;

    close(socket_fd);
    for (auto& pair : clients) {
        std::cout << "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ ID:" << pair.first << " (—Å–æ–∫–µ—Ç: " << pair.second << ")" << std::endl;
        close(pair.second);
    }

    std::cout << "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É" << std::endl;
    return 0;
}